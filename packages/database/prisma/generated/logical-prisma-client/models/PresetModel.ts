/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/*
 * This file exports the `PresetModel` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from '@prisma/client/runtime/client'
import type * as $Enums from '../enums.ts'
import type * as Prisma from '../internal/prismaNamespace.ts'
/**
 * Model PresetModel
 * @
 * @allow ('all', true)
 */
export type PresetModelModel =
	runtime.Types.Result.DefaultSelection<Prisma.$PresetModelPayload>
export type AggregatePresetModel = {
	_count: PresetModelCountAggregateOutputType | null
	_min: PresetModelMinAggregateOutputType | null
	_max: PresetModelMaxAggregateOutputType | null
}
export type PresetModelMinAggregateOutputType = {
	id: string | null
	isDefault: boolean | null
	role: $Enums.ModelRole | null
	presetId: string | null
	modelId: string | null
}
export type PresetModelMaxAggregateOutputType = {
	id: string | null
	isDefault: boolean | null
	role: $Enums.ModelRole | null
	presetId: string | null
	modelId: string | null
}
export type PresetModelCountAggregateOutputType = {
	id: number
	isDefault: number
	role: number
	presetId: number
	modelId: number
	_all: number
}
export type PresetModelMinAggregateInputType = {
	id?: true
	isDefault?: true
	role?: true
	presetId?: true
	modelId?: true
}
export type PresetModelMaxAggregateInputType = {
	id?: true
	isDefault?: true
	role?: true
	presetId?: true
	modelId?: true
}
export type PresetModelCountAggregateInputType = {
	id?: true
	isDefault?: true
	role?: true
	presetId?: true
	modelId?: true
	_all?: true
}
export type PresetModelAggregateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which PresetModel to aggregate.
	 */
	where?: Prisma.PresetModelWhereInput
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of PresetModels to fetch.
	 */
	orderBy?:
		| Prisma.PresetModelOrderByWithRelationInput
		| Prisma.PresetModelOrderByWithRelationInput[]
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the start position
	 */
	cursor?: Prisma.PresetModelWhereUniqueInput
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` PresetModels from the position of the cursor.
	 */
	take?: number
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` PresetModels.
	 */
	skip?: number
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Count returned PresetModels
	 **/
	_count?: true | PresetModelCountAggregateInputType
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the minimum value
	 **/
	_min?: PresetModelMinAggregateInputType
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
	 *
	 * Select which fields to find the maximum value
	 **/
	_max?: PresetModelMaxAggregateInputType
}
export type GetPresetModelAggregateType<T extends PresetModelAggregateArgs> = {
	[P in keyof T & keyof AggregatePresetModel]: P extends '_count' | 'count'
		? T[P] extends true
			? number
			: Prisma.GetScalarType<T[P], AggregatePresetModel[P]>
		: Prisma.GetScalarType<T[P], AggregatePresetModel[P]>
}
export type PresetModelGroupByArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	where?: Prisma.PresetModelWhereInput
	orderBy?:
		| Prisma.PresetModelOrderByWithAggregationInput
		| Prisma.PresetModelOrderByWithAggregationInput[]
	by: Prisma.PresetModelScalarFieldEnum[] | Prisma.PresetModelScalarFieldEnum
	having?: Prisma.PresetModelScalarWhereWithAggregatesInput
	take?: number
	skip?: number
	_count?: PresetModelCountAggregateInputType | true
	_min?: PresetModelMinAggregateInputType
	_max?: PresetModelMaxAggregateInputType
}
export type PresetModelGroupByOutputType = {
	id: string
	isDefault: boolean
	role: $Enums.ModelRole
	presetId: string
	modelId: string
	_count: PresetModelCountAggregateOutputType | null
	_min: PresetModelMinAggregateOutputType | null
	_max: PresetModelMaxAggregateOutputType | null
}
type GetPresetModelGroupByPayload<T extends PresetModelGroupByArgs> =
	Prisma.PrismaPromise<
		Array<
			Prisma.PickEnumerable<PresetModelGroupByOutputType, T['by']> & {
				[P in keyof T &
					keyof PresetModelGroupByOutputType]: P extends '_count'
					? T[P] extends boolean
						? number
						: Prisma.GetScalarType<
								T[P],
								PresetModelGroupByOutputType[P]
							>
					: Prisma.GetScalarType<
							T[P],
							PresetModelGroupByOutputType[P]
						>
			}
		>
	>
export type PresetModelWhereInput = {
	AND?: Prisma.PresetModelWhereInput | Prisma.PresetModelWhereInput[]
	OR?: Prisma.PresetModelWhereInput[]
	NOT?: Prisma.PresetModelWhereInput | Prisma.PresetModelWhereInput[]
	id?: Prisma.StringFilter<'PresetModel'> | string
	isDefault?: Prisma.BoolFilter<'PresetModel'> | boolean
	role?: Prisma.EnumModelRoleFilter<'PresetModel'> | $Enums.ModelRole
	presetId?: Prisma.StringFilter<'PresetModel'> | string
	modelId?: Prisma.StringFilter<'PresetModel'> | string
	Preset?: Prisma.XOR<
		Prisma.PresetScalarRelationFilter,
		Prisma.PresetWhereInput
	>
	Model?: Prisma.XOR<Prisma.ModelScalarRelationFilter, Prisma.ModelWhereInput>
}
export type PresetModelOrderByWithRelationInput = {
	id?: Prisma.SortOrder
	isDefault?: Prisma.SortOrder
	role?: Prisma.SortOrder
	presetId?: Prisma.SortOrder
	modelId?: Prisma.SortOrder
	Preset?: Prisma.PresetOrderByWithRelationInput
	Model?: Prisma.ModelOrderByWithRelationInput
	_relevance?: Prisma.PresetModelOrderByRelevanceInput
}
export type PresetModelWhereUniqueInput = Prisma.AtLeast<
	{
		id?: string
		AND?: Prisma.PresetModelWhereInput | Prisma.PresetModelWhereInput[]
		OR?: Prisma.PresetModelWhereInput[]
		NOT?: Prisma.PresetModelWhereInput | Prisma.PresetModelWhereInput[]
		isDefault?: Prisma.BoolFilter<'PresetModel'> | boolean
		role?: Prisma.EnumModelRoleFilter<'PresetModel'> | $Enums.ModelRole
		presetId?: Prisma.StringFilter<'PresetModel'> | string
		modelId?: Prisma.StringFilter<'PresetModel'> | string
		Preset?: Prisma.XOR<
			Prisma.PresetScalarRelationFilter,
			Prisma.PresetWhereInput
		>
		Model?: Prisma.XOR<
			Prisma.ModelScalarRelationFilter,
			Prisma.ModelWhereInput
		>
	},
	'id'
>
export type PresetModelOrderByWithAggregationInput = {
	id?: Prisma.SortOrder
	isDefault?: Prisma.SortOrder
	role?: Prisma.SortOrder
	presetId?: Prisma.SortOrder
	modelId?: Prisma.SortOrder
	_count?: Prisma.PresetModelCountOrderByAggregateInput
	_max?: Prisma.PresetModelMaxOrderByAggregateInput
	_min?: Prisma.PresetModelMinOrderByAggregateInput
}
export type PresetModelScalarWhereWithAggregatesInput = {
	AND?:
		| Prisma.PresetModelScalarWhereWithAggregatesInput
		| Prisma.PresetModelScalarWhereWithAggregatesInput[]
	OR?: Prisma.PresetModelScalarWhereWithAggregatesInput[]
	NOT?:
		| Prisma.PresetModelScalarWhereWithAggregatesInput
		| Prisma.PresetModelScalarWhereWithAggregatesInput[]
	id?: Prisma.StringWithAggregatesFilter<'PresetModel'> | string
	isDefault?: Prisma.BoolWithAggregatesFilter<'PresetModel'> | boolean
	role?:
		| Prisma.EnumModelRoleWithAggregatesFilter<'PresetModel'>
		| $Enums.ModelRole
	presetId?: Prisma.StringWithAggregatesFilter<'PresetModel'> | string
	modelId?: Prisma.StringWithAggregatesFilter<'PresetModel'> | string
}
export type PresetModelCreateInput = {
	id?: string
	isDefault?: boolean
	role: $Enums.ModelRole
	Preset: Prisma.PresetCreateNestedOneWithoutModelsInput
	Model: Prisma.ModelCreateNestedOneWithoutPresetModelsInput
}
export type PresetModelUncheckedCreateInput = {
	id?: string
	isDefault?: boolean
	role: $Enums.ModelRole
	presetId: string
	modelId: string
}
export type PresetModelUpdateInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string
	isDefault?: Prisma.BoolFieldUpdateOperationsInput | boolean
	role?: Prisma.EnumModelRoleFieldUpdateOperationsInput | $Enums.ModelRole
	Preset?: Prisma.PresetUpdateOneRequiredWithoutModelsNestedInput
	Model?: Prisma.ModelUpdateOneRequiredWithoutPresetModelsNestedInput
}
export type PresetModelUncheckedUpdateInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string
	isDefault?: Prisma.BoolFieldUpdateOperationsInput | boolean
	role?: Prisma.EnumModelRoleFieldUpdateOperationsInput | $Enums.ModelRole
	presetId?: Prisma.StringFieldUpdateOperationsInput | string
	modelId?: Prisma.StringFieldUpdateOperationsInput | string
}
export type PresetModelCreateManyInput = {
	id?: string
	isDefault?: boolean
	role: $Enums.ModelRole
	presetId: string
	modelId: string
}
export type PresetModelUpdateManyMutationInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string
	isDefault?: Prisma.BoolFieldUpdateOperationsInput | boolean
	role?: Prisma.EnumModelRoleFieldUpdateOperationsInput | $Enums.ModelRole
}
export type PresetModelUncheckedUpdateManyInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string
	isDefault?: Prisma.BoolFieldUpdateOperationsInput | boolean
	role?: Prisma.EnumModelRoleFieldUpdateOperationsInput | $Enums.ModelRole
	presetId?: Prisma.StringFieldUpdateOperationsInput | string
	modelId?: Prisma.StringFieldUpdateOperationsInput | string
}
export type PresetModelListRelationFilter = {
	every?: Prisma.PresetModelWhereInput
	some?: Prisma.PresetModelWhereInput
	none?: Prisma.PresetModelWhereInput
}
export type PresetModelOrderByRelationAggregateInput = {
	_count?: Prisma.SortOrder
}
export type PresetModelOrderByRelevanceInput = {
	fields:
		| Prisma.PresetModelOrderByRelevanceFieldEnum
		| Prisma.PresetModelOrderByRelevanceFieldEnum[]
	sort: Prisma.SortOrder
	search: string
}
export type PresetModelCountOrderByAggregateInput = {
	id?: Prisma.SortOrder
	isDefault?: Prisma.SortOrder
	role?: Prisma.SortOrder
	presetId?: Prisma.SortOrder
	modelId?: Prisma.SortOrder
}
export type PresetModelMaxOrderByAggregateInput = {
	id?: Prisma.SortOrder
	isDefault?: Prisma.SortOrder
	role?: Prisma.SortOrder
	presetId?: Prisma.SortOrder
	modelId?: Prisma.SortOrder
}
export type PresetModelMinOrderByAggregateInput = {
	id?: Prisma.SortOrder
	isDefault?: Prisma.SortOrder
	role?: Prisma.SortOrder
	presetId?: Prisma.SortOrder
	modelId?: Prisma.SortOrder
}
export type PresetModelCreateNestedManyWithoutPresetInput = {
	create?:
		| Prisma.XOR<
				Prisma.PresetModelCreateWithoutPresetInput,
				Prisma.PresetModelUncheckedCreateWithoutPresetInput
		  >
		| Prisma.PresetModelCreateWithoutPresetInput[]
		| Prisma.PresetModelUncheckedCreateWithoutPresetInput[]
	connectOrCreate?:
		| Prisma.PresetModelCreateOrConnectWithoutPresetInput
		| Prisma.PresetModelCreateOrConnectWithoutPresetInput[]
	createMany?: Prisma.PresetModelCreateManyPresetInputEnvelope
	connect?:
		| Prisma.PresetModelWhereUniqueInput
		| Prisma.PresetModelWhereUniqueInput[]
}
export type PresetModelUncheckedCreateNestedManyWithoutPresetInput = {
	create?:
		| Prisma.XOR<
				Prisma.PresetModelCreateWithoutPresetInput,
				Prisma.PresetModelUncheckedCreateWithoutPresetInput
		  >
		| Prisma.PresetModelCreateWithoutPresetInput[]
		| Prisma.PresetModelUncheckedCreateWithoutPresetInput[]
	connectOrCreate?:
		| Prisma.PresetModelCreateOrConnectWithoutPresetInput
		| Prisma.PresetModelCreateOrConnectWithoutPresetInput[]
	createMany?: Prisma.PresetModelCreateManyPresetInputEnvelope
	connect?:
		| Prisma.PresetModelWhereUniqueInput
		| Prisma.PresetModelWhereUniqueInput[]
}
export type PresetModelUpdateManyWithoutPresetNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.PresetModelCreateWithoutPresetInput,
				Prisma.PresetModelUncheckedCreateWithoutPresetInput
		  >
		| Prisma.PresetModelCreateWithoutPresetInput[]
		| Prisma.PresetModelUncheckedCreateWithoutPresetInput[]
	connectOrCreate?:
		| Prisma.PresetModelCreateOrConnectWithoutPresetInput
		| Prisma.PresetModelCreateOrConnectWithoutPresetInput[]
	upsert?:
		| Prisma.PresetModelUpsertWithWhereUniqueWithoutPresetInput
		| Prisma.PresetModelUpsertWithWhereUniqueWithoutPresetInput[]
	createMany?: Prisma.PresetModelCreateManyPresetInputEnvelope
	set?:
		| Prisma.PresetModelWhereUniqueInput
		| Prisma.PresetModelWhereUniqueInput[]
	disconnect?:
		| Prisma.PresetModelWhereUniqueInput
		| Prisma.PresetModelWhereUniqueInput[]
	delete?:
		| Prisma.PresetModelWhereUniqueInput
		| Prisma.PresetModelWhereUniqueInput[]
	connect?:
		| Prisma.PresetModelWhereUniqueInput
		| Prisma.PresetModelWhereUniqueInput[]
	update?:
		| Prisma.PresetModelUpdateWithWhereUniqueWithoutPresetInput
		| Prisma.PresetModelUpdateWithWhereUniqueWithoutPresetInput[]
	updateMany?:
		| Prisma.PresetModelUpdateManyWithWhereWithoutPresetInput
		| Prisma.PresetModelUpdateManyWithWhereWithoutPresetInput[]
	deleteMany?:
		| Prisma.PresetModelScalarWhereInput
		| Prisma.PresetModelScalarWhereInput[]
}
export type PresetModelUncheckedUpdateManyWithoutPresetNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.PresetModelCreateWithoutPresetInput,
				Prisma.PresetModelUncheckedCreateWithoutPresetInput
		  >
		| Prisma.PresetModelCreateWithoutPresetInput[]
		| Prisma.PresetModelUncheckedCreateWithoutPresetInput[]
	connectOrCreate?:
		| Prisma.PresetModelCreateOrConnectWithoutPresetInput
		| Prisma.PresetModelCreateOrConnectWithoutPresetInput[]
	upsert?:
		| Prisma.PresetModelUpsertWithWhereUniqueWithoutPresetInput
		| Prisma.PresetModelUpsertWithWhereUniqueWithoutPresetInput[]
	createMany?: Prisma.PresetModelCreateManyPresetInputEnvelope
	set?:
		| Prisma.PresetModelWhereUniqueInput
		| Prisma.PresetModelWhereUniqueInput[]
	disconnect?:
		| Prisma.PresetModelWhereUniqueInput
		| Prisma.PresetModelWhereUniqueInput[]
	delete?:
		| Prisma.PresetModelWhereUniqueInput
		| Prisma.PresetModelWhereUniqueInput[]
	connect?:
		| Prisma.PresetModelWhereUniqueInput
		| Prisma.PresetModelWhereUniqueInput[]
	update?:
		| Prisma.PresetModelUpdateWithWhereUniqueWithoutPresetInput
		| Prisma.PresetModelUpdateWithWhereUniqueWithoutPresetInput[]
	updateMany?:
		| Prisma.PresetModelUpdateManyWithWhereWithoutPresetInput
		| Prisma.PresetModelUpdateManyWithWhereWithoutPresetInput[]
	deleteMany?:
		| Prisma.PresetModelScalarWhereInput
		| Prisma.PresetModelScalarWhereInput[]
}
export type EnumModelRoleFieldUpdateOperationsInput = { set?: $Enums.ModelRole }
export type PresetModelCreateNestedManyWithoutModelInput = {
	create?:
		| Prisma.XOR<
				Prisma.PresetModelCreateWithoutModelInput,
				Prisma.PresetModelUncheckedCreateWithoutModelInput
		  >
		| Prisma.PresetModelCreateWithoutModelInput[]
		| Prisma.PresetModelUncheckedCreateWithoutModelInput[]
	connectOrCreate?:
		| Prisma.PresetModelCreateOrConnectWithoutModelInput
		| Prisma.PresetModelCreateOrConnectWithoutModelInput[]
	createMany?: Prisma.PresetModelCreateManyModelInputEnvelope
	connect?:
		| Prisma.PresetModelWhereUniqueInput
		| Prisma.PresetModelWhereUniqueInput[]
}
export type PresetModelUncheckedCreateNestedManyWithoutModelInput = {
	create?:
		| Prisma.XOR<
				Prisma.PresetModelCreateWithoutModelInput,
				Prisma.PresetModelUncheckedCreateWithoutModelInput
		  >
		| Prisma.PresetModelCreateWithoutModelInput[]
		| Prisma.PresetModelUncheckedCreateWithoutModelInput[]
	connectOrCreate?:
		| Prisma.PresetModelCreateOrConnectWithoutModelInput
		| Prisma.PresetModelCreateOrConnectWithoutModelInput[]
	createMany?: Prisma.PresetModelCreateManyModelInputEnvelope
	connect?:
		| Prisma.PresetModelWhereUniqueInput
		| Prisma.PresetModelWhereUniqueInput[]
}
export type PresetModelUpdateManyWithoutModelNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.PresetModelCreateWithoutModelInput,
				Prisma.PresetModelUncheckedCreateWithoutModelInput
		  >
		| Prisma.PresetModelCreateWithoutModelInput[]
		| Prisma.PresetModelUncheckedCreateWithoutModelInput[]
	connectOrCreate?:
		| Prisma.PresetModelCreateOrConnectWithoutModelInput
		| Prisma.PresetModelCreateOrConnectWithoutModelInput[]
	upsert?:
		| Prisma.PresetModelUpsertWithWhereUniqueWithoutModelInput
		| Prisma.PresetModelUpsertWithWhereUniqueWithoutModelInput[]
	createMany?: Prisma.PresetModelCreateManyModelInputEnvelope
	set?:
		| Prisma.PresetModelWhereUniqueInput
		| Prisma.PresetModelWhereUniqueInput[]
	disconnect?:
		| Prisma.PresetModelWhereUniqueInput
		| Prisma.PresetModelWhereUniqueInput[]
	delete?:
		| Prisma.PresetModelWhereUniqueInput
		| Prisma.PresetModelWhereUniqueInput[]
	connect?:
		| Prisma.PresetModelWhereUniqueInput
		| Prisma.PresetModelWhereUniqueInput[]
	update?:
		| Prisma.PresetModelUpdateWithWhereUniqueWithoutModelInput
		| Prisma.PresetModelUpdateWithWhereUniqueWithoutModelInput[]
	updateMany?:
		| Prisma.PresetModelUpdateManyWithWhereWithoutModelInput
		| Prisma.PresetModelUpdateManyWithWhereWithoutModelInput[]
	deleteMany?:
		| Prisma.PresetModelScalarWhereInput
		| Prisma.PresetModelScalarWhereInput[]
}
export type PresetModelUncheckedUpdateManyWithoutModelNestedInput = {
	create?:
		| Prisma.XOR<
				Prisma.PresetModelCreateWithoutModelInput,
				Prisma.PresetModelUncheckedCreateWithoutModelInput
		  >
		| Prisma.PresetModelCreateWithoutModelInput[]
		| Prisma.PresetModelUncheckedCreateWithoutModelInput[]
	connectOrCreate?:
		| Prisma.PresetModelCreateOrConnectWithoutModelInput
		| Prisma.PresetModelCreateOrConnectWithoutModelInput[]
	upsert?:
		| Prisma.PresetModelUpsertWithWhereUniqueWithoutModelInput
		| Prisma.PresetModelUpsertWithWhereUniqueWithoutModelInput[]
	createMany?: Prisma.PresetModelCreateManyModelInputEnvelope
	set?:
		| Prisma.PresetModelWhereUniqueInput
		| Prisma.PresetModelWhereUniqueInput[]
	disconnect?:
		| Prisma.PresetModelWhereUniqueInput
		| Prisma.PresetModelWhereUniqueInput[]
	delete?:
		| Prisma.PresetModelWhereUniqueInput
		| Prisma.PresetModelWhereUniqueInput[]
	connect?:
		| Prisma.PresetModelWhereUniqueInput
		| Prisma.PresetModelWhereUniqueInput[]
	update?:
		| Prisma.PresetModelUpdateWithWhereUniqueWithoutModelInput
		| Prisma.PresetModelUpdateWithWhereUniqueWithoutModelInput[]
	updateMany?:
		| Prisma.PresetModelUpdateManyWithWhereWithoutModelInput
		| Prisma.PresetModelUpdateManyWithWhereWithoutModelInput[]
	deleteMany?:
		| Prisma.PresetModelScalarWhereInput
		| Prisma.PresetModelScalarWhereInput[]
}
export type PresetModelCreateWithoutPresetInput = {
	id?: string
	isDefault?: boolean
	role: $Enums.ModelRole
	Model: Prisma.ModelCreateNestedOneWithoutPresetModelsInput
}
export type PresetModelUncheckedCreateWithoutPresetInput = {
	id?: string
	isDefault?: boolean
	role: $Enums.ModelRole
	modelId: string
}
export type PresetModelCreateOrConnectWithoutPresetInput = {
	where: Prisma.PresetModelWhereUniqueInput
	create: Prisma.XOR<
		Prisma.PresetModelCreateWithoutPresetInput,
		Prisma.PresetModelUncheckedCreateWithoutPresetInput
	>
}
export type PresetModelCreateManyPresetInputEnvelope = {
	data:
		| Prisma.PresetModelCreateManyPresetInput
		| Prisma.PresetModelCreateManyPresetInput[]
	skipDuplicates?: boolean
}
export type PresetModelUpsertWithWhereUniqueWithoutPresetInput = {
	where: Prisma.PresetModelWhereUniqueInput
	update: Prisma.XOR<
		Prisma.PresetModelUpdateWithoutPresetInput,
		Prisma.PresetModelUncheckedUpdateWithoutPresetInput
	>
	create: Prisma.XOR<
		Prisma.PresetModelCreateWithoutPresetInput,
		Prisma.PresetModelUncheckedCreateWithoutPresetInput
	>
}
export type PresetModelUpdateWithWhereUniqueWithoutPresetInput = {
	where: Prisma.PresetModelWhereUniqueInput
	data: Prisma.XOR<
		Prisma.PresetModelUpdateWithoutPresetInput,
		Prisma.PresetModelUncheckedUpdateWithoutPresetInput
	>
}
export type PresetModelUpdateManyWithWhereWithoutPresetInput = {
	where: Prisma.PresetModelScalarWhereInput
	data: Prisma.XOR<
		Prisma.PresetModelUpdateManyMutationInput,
		Prisma.PresetModelUncheckedUpdateManyWithoutPresetInput
	>
}
export type PresetModelScalarWhereInput = {
	AND?:
		| Prisma.PresetModelScalarWhereInput
		| Prisma.PresetModelScalarWhereInput[]
	OR?: Prisma.PresetModelScalarWhereInput[]
	NOT?:
		| Prisma.PresetModelScalarWhereInput
		| Prisma.PresetModelScalarWhereInput[]
	id?: Prisma.StringFilter<'PresetModel'> | string
	isDefault?: Prisma.BoolFilter<'PresetModel'> | boolean
	role?: Prisma.EnumModelRoleFilter<'PresetModel'> | $Enums.ModelRole
	presetId?: Prisma.StringFilter<'PresetModel'> | string
	modelId?: Prisma.StringFilter<'PresetModel'> | string
}
export type PresetModelCreateWithoutModelInput = {
	id?: string
	isDefault?: boolean
	role: $Enums.ModelRole
	Preset: Prisma.PresetCreateNestedOneWithoutModelsInput
}
export type PresetModelUncheckedCreateWithoutModelInput = {
	id?: string
	isDefault?: boolean
	role: $Enums.ModelRole
	presetId: string
}
export type PresetModelCreateOrConnectWithoutModelInput = {
	where: Prisma.PresetModelWhereUniqueInput
	create: Prisma.XOR<
		Prisma.PresetModelCreateWithoutModelInput,
		Prisma.PresetModelUncheckedCreateWithoutModelInput
	>
}
export type PresetModelCreateManyModelInputEnvelope = {
	data:
		| Prisma.PresetModelCreateManyModelInput
		| Prisma.PresetModelCreateManyModelInput[]
	skipDuplicates?: boolean
}
export type PresetModelUpsertWithWhereUniqueWithoutModelInput = {
	where: Prisma.PresetModelWhereUniqueInput
	update: Prisma.XOR<
		Prisma.PresetModelUpdateWithoutModelInput,
		Prisma.PresetModelUncheckedUpdateWithoutModelInput
	>
	create: Prisma.XOR<
		Prisma.PresetModelCreateWithoutModelInput,
		Prisma.PresetModelUncheckedCreateWithoutModelInput
	>
}
export type PresetModelUpdateWithWhereUniqueWithoutModelInput = {
	where: Prisma.PresetModelWhereUniqueInput
	data: Prisma.XOR<
		Prisma.PresetModelUpdateWithoutModelInput,
		Prisma.PresetModelUncheckedUpdateWithoutModelInput
	>
}
export type PresetModelUpdateManyWithWhereWithoutModelInput = {
	where: Prisma.PresetModelScalarWhereInput
	data: Prisma.XOR<
		Prisma.PresetModelUpdateManyMutationInput,
		Prisma.PresetModelUncheckedUpdateManyWithoutModelInput
	>
}
export type PresetModelCreateManyPresetInput = {
	id?: string
	isDefault?: boolean
	role: $Enums.ModelRole
	modelId: string
}
export type PresetModelUpdateWithoutPresetInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string
	isDefault?: Prisma.BoolFieldUpdateOperationsInput | boolean
	role?: Prisma.EnumModelRoleFieldUpdateOperationsInput | $Enums.ModelRole
	Model?: Prisma.ModelUpdateOneRequiredWithoutPresetModelsNestedInput
}
export type PresetModelUncheckedUpdateWithoutPresetInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string
	isDefault?: Prisma.BoolFieldUpdateOperationsInput | boolean
	role?: Prisma.EnumModelRoleFieldUpdateOperationsInput | $Enums.ModelRole
	modelId?: Prisma.StringFieldUpdateOperationsInput | string
}
export type PresetModelUncheckedUpdateManyWithoutPresetInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string
	isDefault?: Prisma.BoolFieldUpdateOperationsInput | boolean
	role?: Prisma.EnumModelRoleFieldUpdateOperationsInput | $Enums.ModelRole
	modelId?: Prisma.StringFieldUpdateOperationsInput | string
}
export type PresetModelCreateManyModelInput = {
	id?: string
	isDefault?: boolean
	role: $Enums.ModelRole
	presetId: string
}
export type PresetModelUpdateWithoutModelInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string
	isDefault?: Prisma.BoolFieldUpdateOperationsInput | boolean
	role?: Prisma.EnumModelRoleFieldUpdateOperationsInput | $Enums.ModelRole
	Preset?: Prisma.PresetUpdateOneRequiredWithoutModelsNestedInput
}
export type PresetModelUncheckedUpdateWithoutModelInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string
	isDefault?: Prisma.BoolFieldUpdateOperationsInput | boolean
	role?: Prisma.EnumModelRoleFieldUpdateOperationsInput | $Enums.ModelRole
	presetId?: Prisma.StringFieldUpdateOperationsInput | string
}
export type PresetModelUncheckedUpdateManyWithoutModelInput = {
	id?: Prisma.StringFieldUpdateOperationsInput | string
	isDefault?: Prisma.BoolFieldUpdateOperationsInput | boolean
	role?: Prisma.EnumModelRoleFieldUpdateOperationsInput | $Enums.ModelRole
	presetId?: Prisma.StringFieldUpdateOperationsInput | string
}
export type PresetModelSelect<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean
		isDefault?: boolean
		role?: boolean
		presetId?: boolean
		modelId?: boolean
		Preset?: boolean | Prisma.PresetDefaultArgs<ExtArgs>
		Model?: boolean | Prisma.ModelDefaultArgs<ExtArgs>
	},
	ExtArgs['result']['presetModel']
>
export type PresetModelSelectCreateManyAndReturn<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean
		isDefault?: boolean
		role?: boolean
		presetId?: boolean
		modelId?: boolean
		Preset?: boolean | Prisma.PresetDefaultArgs<ExtArgs>
		Model?: boolean | Prisma.ModelDefaultArgs<ExtArgs>
	},
	ExtArgs['result']['presetModel']
>
export type PresetModelSelectUpdateManyAndReturn<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
	{
		id?: boolean
		isDefault?: boolean
		role?: boolean
		presetId?: boolean
		modelId?: boolean
		Preset?: boolean | Prisma.PresetDefaultArgs<ExtArgs>
		Model?: boolean | Prisma.ModelDefaultArgs<ExtArgs>
	},
	ExtArgs['result']['presetModel']
>
export type PresetModelSelectScalar = {
	id?: boolean
	isDefault?: boolean
	role?: boolean
	presetId?: boolean
	modelId?: boolean
}
export type PresetModelOmit<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
	'id' | 'isDefault' | 'role' | 'presetId' | 'modelId',
	ExtArgs['result']['presetModel']
>
export type PresetModelInclude<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	Preset?: boolean | Prisma.PresetDefaultArgs<ExtArgs>
	Model?: boolean | Prisma.ModelDefaultArgs<ExtArgs>
}
export type PresetModelIncludeCreateManyAndReturn<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	Preset?: boolean | Prisma.PresetDefaultArgs<ExtArgs>
	Model?: boolean | Prisma.ModelDefaultArgs<ExtArgs>
}
export type PresetModelIncludeUpdateManyAndReturn<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	Preset?: boolean | Prisma.PresetDefaultArgs<ExtArgs>
	Model?: boolean | Prisma.ModelDefaultArgs<ExtArgs>
}
export type $PresetModelPayload<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	name: 'PresetModel'
	objects: {
		Preset: Prisma.$PresetPayload<ExtArgs>
		Model: Prisma.$ModelPayload<ExtArgs>
	}
	scalars: runtime.Types.Extensions.GetPayloadResult<
		{
			id: string
			isDefault: boolean
			role: $Enums.ModelRole
			presetId: string
			modelId: string
		},
		ExtArgs['result']['presetModel']
	>
	composites: {}
}
export type PresetModelGetPayload<
	S extends boolean | null | undefined | PresetModelDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$PresetModelPayload, S>
export type PresetModelCountArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<
	PresetModelFindManyArgs,
	'select' | 'include' | 'distinct' | 'omit'
> & { select?: PresetModelCountAggregateInputType | true }

export interface PresetModelDelegate<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> {
	[K: symbol]: {
		types: Prisma.TypeMap<ExtArgs>['model']['PresetModel']
		meta: { name: 'PresetModel' }
	}
	/**
	 * Fields of the PresetModel model
	 */
	readonly fields: PresetModelFieldRefs
	/**
	 * Find zero or one PresetModel that matches the filter.
	 * @param {PresetModelFindUniqueArgs} args - Arguments to find a PresetModel
	 * @example
	 * // Get one PresetModel
	 * const presetModel = await prisma.presetModel.findUnique({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUnique<T extends PresetModelFindUniqueArgs>(
		args: Prisma.SelectSubset<T, PresetModelFindUniqueArgs<ExtArgs>>,
	): Prisma.Prisma__PresetModelClient<
		runtime.Types.Result.GetResult<
			Prisma.$PresetModelPayload<ExtArgs>,
			T,
			'findUnique',
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>
	/**
	 * Find one PresetModel that matches the filter or throw an error with `error.code='P2025'`
	 * if no matches were found.
	 * @param {PresetModelFindUniqueOrThrowArgs} args - Arguments to find a PresetModel
	 * @example
	 * // Get one PresetModel
	 * const presetModel = await prisma.presetModel.findUniqueOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findUniqueOrThrow<T extends PresetModelFindUniqueOrThrowArgs>(
		args: Prisma.SelectSubset<T, PresetModelFindUniqueOrThrowArgs<ExtArgs>>,
	): Prisma.Prisma__PresetModelClient<
		runtime.Types.Result.GetResult<
			Prisma.$PresetModelPayload<ExtArgs>,
			T,
			'findUniqueOrThrow',
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>
	/**
	 * Find the first PresetModel that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {PresetModelFindFirstArgs} args - Arguments to find a PresetModel
	 * @example
	 * // Get one PresetModel
	 * const presetModel = await prisma.presetModel.findFirst({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirst<T extends PresetModelFindFirstArgs>(
		args?: Prisma.SelectSubset<T, PresetModelFindFirstArgs<ExtArgs>>,
	): Prisma.Prisma__PresetModelClient<
		runtime.Types.Result.GetResult<
			Prisma.$PresetModelPayload<ExtArgs>,
			T,
			'findFirst',
			GlobalOmitOptions
		> | null,
		null,
		ExtArgs,
		GlobalOmitOptions
	>
	/**
	 * Find the first PresetModel that matches the filter or
	 * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {PresetModelFindFirstOrThrowArgs} args - Arguments to find a PresetModel
	 * @example
	 * // Get one PresetModel
	 * const presetModel = await prisma.presetModel.findFirstOrThrow({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	findFirstOrThrow<T extends PresetModelFindFirstOrThrowArgs>(
		args?: Prisma.SelectSubset<T, PresetModelFindFirstOrThrowArgs<ExtArgs>>,
	): Prisma.Prisma__PresetModelClient<
		runtime.Types.Result.GetResult<
			Prisma.$PresetModelPayload<ExtArgs>,
			T,
			'findFirstOrThrow',
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>
	/**
	 * Find zero or more PresetModels that matches the filter.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {PresetModelFindManyArgs} args - Arguments to filter and select certain fields only.
	 * @example
	 * // Get all PresetModels
	 * const presetModels = await prisma.presetModel.findMany()
	 *
	 * // Get first 10 PresetModels
	 * const presetModels = await prisma.presetModel.findMany({ take: 10 })
	 *
	 * // Only select the `id`
	 * const presetModelWithIdOnly = await prisma.presetModel.findMany({ select: { id: true } })
	 */
	findMany<T extends PresetModelFindManyArgs>(
		args?: Prisma.SelectSubset<T, PresetModelFindManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$PresetModelPayload<ExtArgs>,
			T,
			'findMany',
			GlobalOmitOptions
		>
	>
	/**
	 * Create a PresetModel.
	 * @param {PresetModelCreateArgs} args - Arguments to create a PresetModel.
	 * @example
	 * // Create one PresetModel
	 * const PresetModel = await prisma.presetModel.create({
	 *   data: {
	 *     // ... data to create a PresetModel
	 *   }
	 * })
	 */
	create<T extends PresetModelCreateArgs>(
		args: Prisma.SelectSubset<T, PresetModelCreateArgs<ExtArgs>>,
	): Prisma.Prisma__PresetModelClient<
		runtime.Types.Result.GetResult<
			Prisma.$PresetModelPayload<ExtArgs>,
			T,
			'create',
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>
	/**
	 * Create many PresetModels.
	 * @param {PresetModelCreateManyArgs} args - Arguments to create many PresetModels.
	 * @example
	 * // Create many PresetModels
	 * const presetModel = await prisma.presetModel.createMany({
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 */
	createMany<T extends PresetModelCreateManyArgs>(
		args?: Prisma.SelectSubset<T, PresetModelCreateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>
	/**
	 * Create many PresetModels and returns the data saved in the database.
	 * @param {PresetModelCreateManyAndReturnArgs} args - Arguments to create many PresetModels.
	 * @example
	 * // Create many PresetModels
	 * const presetModel = await prisma.presetModel.createManyAndReturn({
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 * // Create many PresetModels and only return the `id`
	 * const presetModelWithIdOnly = await prisma.presetModel.createManyAndReturn({
	 *   select: { id: true },
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 */
	createManyAndReturn<T extends PresetModelCreateManyAndReturnArgs>(
		args?: Prisma.SelectSubset<
			T,
			PresetModelCreateManyAndReturnArgs<ExtArgs>
		>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$PresetModelPayload<ExtArgs>,
			T,
			'createManyAndReturn',
			GlobalOmitOptions
		>
	>
	/**
	 * Delete a PresetModel.
	 * @param {PresetModelDeleteArgs} args - Arguments to delete one PresetModel.
	 * @example
	 * // Delete one PresetModel
	 * const PresetModel = await prisma.presetModel.delete({
	 *   where: {
	 *     // ... filter to delete one PresetModel
	 *   }
	 * })
	 */
	delete<T extends PresetModelDeleteArgs>(
		args: Prisma.SelectSubset<T, PresetModelDeleteArgs<ExtArgs>>,
	): Prisma.Prisma__PresetModelClient<
		runtime.Types.Result.GetResult<
			Prisma.$PresetModelPayload<ExtArgs>,
			T,
			'delete',
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>
	/**
	 * Update one PresetModel.
	 * @param {PresetModelUpdateArgs} args - Arguments to update one PresetModel.
	 * @example
	 * // Update one PresetModel
	 * const presetModel = await prisma.presetModel.update({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 */
	update<T extends PresetModelUpdateArgs>(
		args: Prisma.SelectSubset<T, PresetModelUpdateArgs<ExtArgs>>,
	): Prisma.Prisma__PresetModelClient<
		runtime.Types.Result.GetResult<
			Prisma.$PresetModelPayload<ExtArgs>,
			T,
			'update',
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>
	/**
	 * Delete zero or more PresetModels.
	 * @param {PresetModelDeleteManyArgs} args - Arguments to filter PresetModels to delete.
	 * @example
	 * // Delete a few PresetModels
	 * const { count } = await prisma.presetModel.deleteMany({
	 *   where: {
	 *     // ... provide filter here
	 *   }
	 * })
	 */
	deleteMany<T extends PresetModelDeleteManyArgs>(
		args?: Prisma.SelectSubset<T, PresetModelDeleteManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>
	/**
	 * Update zero or more PresetModels.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {PresetModelUpdateManyArgs} args - Arguments to update one or more rows.
	 * @example
	 * // Update many PresetModels
	 * const presetModel = await prisma.presetModel.updateMany({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: {
	 *     // ... provide data here
	 *   }
	 * })
	 */
	updateMany<T extends PresetModelUpdateManyArgs>(
		args: Prisma.SelectSubset<T, PresetModelUpdateManyArgs<ExtArgs>>,
	): Prisma.PrismaPromise<Prisma.BatchPayload>
	/**
	 * Update zero or more PresetModels and returns the data updated in the database.
	 * @param {PresetModelUpdateManyAndReturnArgs} args - Arguments to update many PresetModels.
	 * @example
	 * // Update many PresetModels
	 * const presetModel = await prisma.presetModel.updateManyAndReturn({
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 *
	 * // Update zero or more PresetModels and only return the `id`
	 * const presetModelWithIdOnly = await prisma.presetModel.updateManyAndReturn({
	 *   select: { id: true },
	 *   where: {
	 *     // ... provide filter here
	 *   },
	 *   data: [
	 *     // ... provide data here
	 *   ]
	 * })
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 */
	updateManyAndReturn<T extends PresetModelUpdateManyAndReturnArgs>(
		args: Prisma.SelectSubset<
			T,
			PresetModelUpdateManyAndReturnArgs<ExtArgs>
		>,
	): Prisma.PrismaPromise<
		runtime.Types.Result.GetResult<
			Prisma.$PresetModelPayload<ExtArgs>,
			T,
			'updateManyAndReturn',
			GlobalOmitOptions
		>
	>
	/**
	 * Create or update one PresetModel.
	 * @param {PresetModelUpsertArgs} args - Arguments to update or create a PresetModel.
	 * @example
	 * // Update or create a PresetModel
	 * const presetModel = await prisma.presetModel.upsert({
	 *   create: {
	 *     // ... data to create a PresetModel
	 *   },
	 *   update: {
	 *     // ... in case it already exists, update
	 *   },
	 *   where: {
	 *     // ... the filter for the PresetModel we want to update
	 *   }
	 * })
	 */
	upsert<T extends PresetModelUpsertArgs>(
		args: Prisma.SelectSubset<T, PresetModelUpsertArgs<ExtArgs>>,
	): Prisma.Prisma__PresetModelClient<
		runtime.Types.Result.GetResult<
			Prisma.$PresetModelPayload<ExtArgs>,
			T,
			'upsert',
			GlobalOmitOptions
		>,
		never,
		ExtArgs,
		GlobalOmitOptions
	>
	/**
	 * Count the number of PresetModels.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {PresetModelCountArgs} args - Arguments to filter PresetModels to count.
	 * @example
	 * // Count the number of PresetModels
	 * const count = await prisma.presetModel.count({
	 *   where: {
	 *     // ... the filter for the PresetModels we want to count
	 *   }
	 * })
	 */
	count<T extends PresetModelCountArgs>(
		args?: Prisma.Subset<T, PresetModelCountArgs>,
	): Prisma.PrismaPromise<
		T extends runtime.Types.Utils.Record<'select', any>
			? T['select'] extends true
				? number
				: Prisma.GetScalarType<
						T['select'],
						PresetModelCountAggregateOutputType
					>
			: number
	>
	/**
	 * Allows you to perform aggregations operations on a PresetModel.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {PresetModelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
	 * @example
	 * // Ordered by age ascending
	 * // Where email contains prisma.io
	 * // Limited to the 10 users
	 * const aggregations = await prisma.user.aggregate({
	 *   _avg: {
	 *     age: true,
	 *   },
	 *   where: {
	 *     email: {
	 *       contains: "prisma.io",
	 *     },
	 *   },
	 *   orderBy: {
	 *     age: "asc",
	 *   },
	 *   take: 10,
	 * })
	 */
	aggregate<T extends PresetModelAggregateArgs>(
		args: Prisma.Subset<T, PresetModelAggregateArgs>,
	): Prisma.PrismaPromise<GetPresetModelAggregateType<T>>
	/**
	 * Group by PresetModel.
	 * Note, that providing `undefined` is treated as the value not being there.
	 * Read more here: https://pris.ly/d/null-undefined
	 * @param {PresetModelGroupByArgs} args - Group by arguments.
	 * @example
	 * // Group by city, order by createdAt, get count
	 * const result = await prisma.user.groupBy({
	 *   by: ['city', 'createdAt'],
	 *   orderBy: {
	 *     createdAt: true
	 *   },
	 *   _count: {
	 *     _all: true
	 *   },
	 * })
	 */
	groupBy<
		T extends PresetModelGroupByArgs,
		HasSelectOrTake extends Prisma.Or<
			Prisma.Extends<'skip', Prisma.Keys<T>>,
			Prisma.Extends<'take', Prisma.Keys<T>>
		>,
		OrderByArg extends Prisma.True extends HasSelectOrTake
			? { orderBy: PresetModelGroupByArgs['orderBy'] }
			: { orderBy?: PresetModelGroupByArgs['orderBy'] },
		OrderFields extends Prisma.ExcludeUnderscoreKeys<
			Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
		>,
		ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
		ByValid extends Prisma.Has<ByFields, OrderFields>,
		HavingFields extends Prisma.GetHavingFields<T['having']>,
		HavingValid extends Prisma.Has<ByFields, HavingFields>,
		ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
		InputErrors extends ByEmpty extends Prisma.True
			? `Error: "by" must not be empty.`
			: HavingValid extends Prisma.False
				? {
						[P in HavingFields]: P extends ByFields
							? never
							: P extends string
								? `Error: Field "${P}" used in "having" needs to be provided in "by".`
								: [
										Error,
										'Field ',
										P,
										` in "having" needs to be provided in "by"`,
									]
					}[HavingFields]
				: 'take' extends Prisma.Keys<T>
					? 'orderBy' extends Prisma.Keys<T>
						? ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
								}[OrderFields]
						: 'Error: If you provide "take", you also need to provide "orderBy"'
					: 'skip' extends Prisma.Keys<T>
						? 'orderBy' extends Prisma.Keys<T>
							? ByValid extends Prisma.True
								? {}
								: {
										[P in OrderFields]: P extends ByFields
											? never
											: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
									}[OrderFields]
							: 'Error: If you provide "skip", you also need to provide "orderBy"'
						: ByValid extends Prisma.True
							? {}
							: {
									[P in OrderFields]: P extends ByFields
										? never
										: `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
								}[OrderFields],
	>(
		args: Prisma.SubsetIntersection<T, PresetModelGroupByArgs, OrderByArg> &
			InputErrors,
	): {} extends InputErrors
		? GetPresetModelGroupByPayload<T>
		: Prisma.PrismaPromise<InputErrors>
}

/**
 * The delegate class that acts as a "Promise-like" for PresetModel.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PresetModelClient<
	T,
	Null = never,
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
	GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
	readonly [Symbol.toStringTag]: 'PrismaPromise'
	Preset<T extends Prisma.PresetDefaultArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.PresetDefaultArgs<ExtArgs>>,
	): Prisma.Prisma__PresetClient<
		| runtime.Types.Result.GetResult<
				Prisma.$PresetPayload<ExtArgs>,
				T,
				'findUniqueOrThrow',
				GlobalOmitOptions
		  >
		| Null,
		Null,
		ExtArgs,
		GlobalOmitOptions
	>
	Model<T extends Prisma.ModelDefaultArgs<ExtArgs> = {}>(
		args?: Prisma.Subset<T, Prisma.ModelDefaultArgs<ExtArgs>>,
	): Prisma.Prisma__ModelClient<
		| runtime.Types.Result.GetResult<
				Prisma.$ModelPayload<ExtArgs>,
				T,
				'findUniqueOrThrow',
				GlobalOmitOptions
		  >
		| Null,
		Null,
		ExtArgs,
		GlobalOmitOptions
	>
	/**
	 * Attaches callbacks for the resolution and/or rejection of the Promise.
	 * @param onfulfilled The callback to execute when the Promise is resolved.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of which ever callback is executed.
	 */
	then<TResult1 = T, TResult2 = never>(
		onfulfilled?:
			| ((value: T) => TResult1 | PromiseLike<TResult1>)
			| undefined
			| null,
		onrejected?:
			| ((reason: any) => TResult2 | PromiseLike<TResult2>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
	/**
	 * Attaches a callback for only the rejection of the Promise.
	 * @param onrejected The callback to execute when the Promise is rejected.
	 * @returns A Promise for the completion of the callback.
	 */
	catch<TResult = never>(
		onrejected?:
			| ((reason: any) => TResult | PromiseLike<TResult>)
			| undefined
			| null,
	): runtime.Types.Utils.JsPromise<T | TResult>
	/**
	 * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
	 * resolved value cannot be modified from the callback.
	 * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
	 * @returns A Promise for the completion of the callback.
	 */
	finally(
		onfinally?: (() => void) | undefined | null,
	): runtime.Types.Utils.JsPromise<T>
}

/**
 * Fields of the PresetModel model
 */
export interface PresetModelFieldRefs {
	readonly id: Prisma.FieldRef<'PresetModel', 'String'>
	readonly isDefault: Prisma.FieldRef<'PresetModel', 'Boolean'>
	readonly role: Prisma.FieldRef<'PresetModel', 'ModelRole'>
	readonly presetId: Prisma.FieldRef<'PresetModel', 'String'>
	readonly modelId: Prisma.FieldRef<'PresetModel', 'String'>
}

// Custom InputTypes
/**
 * PresetModel findUnique
 */
export type PresetModelFindUniqueArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the PresetModel
	 */
	select?: Prisma.PresetModelSelect<ExtArgs> | null
	/**
	 * Omit specific fields from the PresetModel
	 */
	omit?: Prisma.PresetModelOmit<ExtArgs> | null
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.PresetModelInclude<ExtArgs> | null
	/**
	 * Filter, which PresetModel to fetch.
	 */
	where: Prisma.PresetModelWhereUniqueInput
}
/**
 * PresetModel findUniqueOrThrow
 */
export type PresetModelFindUniqueOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the PresetModel
	 */
	select?: Prisma.PresetModelSelect<ExtArgs> | null
	/**
	 * Omit specific fields from the PresetModel
	 */
	omit?: Prisma.PresetModelOmit<ExtArgs> | null
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.PresetModelInclude<ExtArgs> | null
	/**
	 * Filter, which PresetModel to fetch.
	 */
	where: Prisma.PresetModelWhereUniqueInput
}
/**
 * PresetModel findFirst
 */
export type PresetModelFindFirstArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the PresetModel
	 */
	select?: Prisma.PresetModelSelect<ExtArgs> | null
	/**
	 * Omit specific fields from the PresetModel
	 */
	omit?: Prisma.PresetModelOmit<ExtArgs> | null
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.PresetModelInclude<ExtArgs> | null
	/**
	 * Filter, which PresetModel to fetch.
	 */
	where?: Prisma.PresetModelWhereInput
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of PresetModels to fetch.
	 */
	orderBy?:
		| Prisma.PresetModelOrderByWithRelationInput
		| Prisma.PresetModelOrderByWithRelationInput[]
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for PresetModels.
	 */
	cursor?: Prisma.PresetModelWhereUniqueInput
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` PresetModels from the position of the cursor.
	 */
	take?: number
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` PresetModels.
	 */
	skip?: number
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of PresetModels.
	 */
	distinct?:
		| Prisma.PresetModelScalarFieldEnum
		| Prisma.PresetModelScalarFieldEnum[]
}
/**
 * PresetModel findFirstOrThrow
 */
export type PresetModelFindFirstOrThrowArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the PresetModel
	 */
	select?: Prisma.PresetModelSelect<ExtArgs> | null
	/**
	 * Omit specific fields from the PresetModel
	 */
	omit?: Prisma.PresetModelOmit<ExtArgs> | null
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.PresetModelInclude<ExtArgs> | null
	/**
	 * Filter, which PresetModel to fetch.
	 */
	where?: Prisma.PresetModelWhereInput
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of PresetModels to fetch.
	 */
	orderBy?:
		| Prisma.PresetModelOrderByWithRelationInput
		| Prisma.PresetModelOrderByWithRelationInput[]
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for searching for PresetModels.
	 */
	cursor?: Prisma.PresetModelWhereUniqueInput
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` PresetModels from the position of the cursor.
	 */
	take?: number
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` PresetModels.
	 */
	skip?: number
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
	 *
	 * Filter by unique combinations of PresetModels.
	 */
	distinct?:
		| Prisma.PresetModelScalarFieldEnum
		| Prisma.PresetModelScalarFieldEnum[]
}
/**
 * PresetModel findMany
 */
export type PresetModelFindManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the PresetModel
	 */
	select?: Prisma.PresetModelSelect<ExtArgs> | null
	/**
	 * Omit specific fields from the PresetModel
	 */
	omit?: Prisma.PresetModelOmit<ExtArgs> | null
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.PresetModelInclude<ExtArgs> | null
	/**
	 * Filter, which PresetModels to fetch.
	 */
	where?: Prisma.PresetModelWhereInput
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
	 *
	 * Determine the order of PresetModels to fetch.
	 */
	orderBy?:
		| Prisma.PresetModelOrderByWithRelationInput
		| Prisma.PresetModelOrderByWithRelationInput[]
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
	 *
	 * Sets the position for listing PresetModels.
	 */
	cursor?: Prisma.PresetModelWhereUniqueInput
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Take `Â±n` PresetModels from the position of the cursor.
	 */
	take?: number
	/**
	 * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
	 *
	 * Skip the first `n` PresetModels.
	 */
	skip?: number
	distinct?:
		| Prisma.PresetModelScalarFieldEnum
		| Prisma.PresetModelScalarFieldEnum[]
}
/**
 * PresetModel create
 */
export type PresetModelCreateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the PresetModel
	 */
	select?: Prisma.PresetModelSelect<ExtArgs> | null
	/**
	 * Omit specific fields from the PresetModel
	 */
	omit?: Prisma.PresetModelOmit<ExtArgs> | null
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.PresetModelInclude<ExtArgs> | null
	/**
	 * The data needed to create a PresetModel.
	 */
	data: Prisma.XOR<
		Prisma.PresetModelCreateInput,
		Prisma.PresetModelUncheckedCreateInput
	>
}
/**
 * PresetModel createMany
 */
export type PresetModelCreateManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to create many PresetModels.
	 */
	data:
		| Prisma.PresetModelCreateManyInput
		| Prisma.PresetModelCreateManyInput[]
	skipDuplicates?: boolean
}
/**
 * PresetModel createManyAndReturn
 */
export type PresetModelCreateManyAndReturnArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the PresetModel
	 */
	select?: Prisma.PresetModelSelectCreateManyAndReturn<ExtArgs> | null
	/**
	 * Omit specific fields from the PresetModel
	 */
	omit?: Prisma.PresetModelOmit<ExtArgs> | null
	/**
	 * The data used to create many PresetModels.
	 */
	data:
		| Prisma.PresetModelCreateManyInput
		| Prisma.PresetModelCreateManyInput[]
	skipDuplicates?: boolean
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.PresetModelIncludeCreateManyAndReturn<ExtArgs> | null
}
/**
 * PresetModel update
 */
export type PresetModelUpdateArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the PresetModel
	 */
	select?: Prisma.PresetModelSelect<ExtArgs> | null
	/**
	 * Omit specific fields from the PresetModel
	 */
	omit?: Prisma.PresetModelOmit<ExtArgs> | null
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.PresetModelInclude<ExtArgs> | null
	/**
	 * The data needed to update a PresetModel.
	 */
	data: Prisma.XOR<
		Prisma.PresetModelUpdateInput,
		Prisma.PresetModelUncheckedUpdateInput
	>
	/**
	 * Choose, which PresetModel to update.
	 */
	where: Prisma.PresetModelWhereUniqueInput
}
/**
 * PresetModel updateMany
 */
export type PresetModelUpdateManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * The data used to update PresetModels.
	 */
	data: Prisma.XOR<
		Prisma.PresetModelUpdateManyMutationInput,
		Prisma.PresetModelUncheckedUpdateManyInput
	>
	/**
	 * Filter which PresetModels to update
	 */
	where?: Prisma.PresetModelWhereInput
	/**
	 * Limit how many PresetModels to update.
	 */
	limit?: number
}
/**
 * PresetModel updateManyAndReturn
 */
export type PresetModelUpdateManyAndReturnArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the PresetModel
	 */
	select?: Prisma.PresetModelSelectUpdateManyAndReturn<ExtArgs> | null
	/**
	 * Omit specific fields from the PresetModel
	 */
	omit?: Prisma.PresetModelOmit<ExtArgs> | null
	/**
	 * The data used to update PresetModels.
	 */
	data: Prisma.XOR<
		Prisma.PresetModelUpdateManyMutationInput,
		Prisma.PresetModelUncheckedUpdateManyInput
	>
	/**
	 * Filter which PresetModels to update
	 */
	where?: Prisma.PresetModelWhereInput
	/**
	 * Limit how many PresetModels to update.
	 */
	limit?: number
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.PresetModelIncludeUpdateManyAndReturn<ExtArgs> | null
}
/**
 * PresetModel upsert
 */
export type PresetModelUpsertArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the PresetModel
	 */
	select?: Prisma.PresetModelSelect<ExtArgs> | null
	/**
	 * Omit specific fields from the PresetModel
	 */
	omit?: Prisma.PresetModelOmit<ExtArgs> | null
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.PresetModelInclude<ExtArgs> | null
	/**
	 * The filter to search for the PresetModel to update in case it exists.
	 */
	where: Prisma.PresetModelWhereUniqueInput
	/**
	 * In case the PresetModel found by the `where` argument doesn't exist, create a new PresetModel with this data.
	 */
	create: Prisma.XOR<
		Prisma.PresetModelCreateInput,
		Prisma.PresetModelUncheckedCreateInput
	>
	/**
	 * In case the PresetModel was found with the provided `where` argument, update it with this data.
	 */
	update: Prisma.XOR<
		Prisma.PresetModelUpdateInput,
		Prisma.PresetModelUncheckedUpdateInput
	>
}
/**
 * PresetModel delete
 */
export type PresetModelDeleteArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the PresetModel
	 */
	select?: Prisma.PresetModelSelect<ExtArgs> | null
	/**
	 * Omit specific fields from the PresetModel
	 */
	omit?: Prisma.PresetModelOmit<ExtArgs> | null
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.PresetModelInclude<ExtArgs> | null
	/**
	 * Filter which PresetModel to delete.
	 */
	where: Prisma.PresetModelWhereUniqueInput
}
/**
 * PresetModel deleteMany
 */
export type PresetModelDeleteManyArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Filter which PresetModels to delete
	 */
	where?: Prisma.PresetModelWhereInput
	/**
	 * Limit how many PresetModels to delete.
	 */
	limit?: number
}
/**
 * PresetModel without action
 */
export type PresetModelDefaultArgs<
	ExtArgs extends
		runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
	/**
	 * Select specific fields to fetch from the PresetModel
	 */
	select?: Prisma.PresetModelSelect<ExtArgs> | null
	/**
	 * Omit specific fields from the PresetModel
	 */
	omit?: Prisma.PresetModelOmit<ExtArgs> | null
	/**
	 * Choose, which related nodes to fetch as well
	 */
	include?: Prisma.PresetModelInclude<ExtArgs> | null
}
