import "analysis"
import "model"
import "preset"

enum Role {
  superadmin
  admin
  authenticated
}

enum AuthProvider {
  local
  google
}

model User {
  @@auth
  
  // Id cannot change
  id            String     @id @default(cuid()) @deny("update", true)

  name          String

  // Emails cannot change
  email         String     @email @unique @deny("update", true)

  emailVerified Boolean

  image         String?

  lang      String   @default("en")

  // Only users can update it's last time login
  loggedAt      DateTime?  @allow('update', auth() == this)

  // 1.Only admins can update a user role
  // 2.Only a superadmin can update the role of other admin
  role          Role       @default(authenticated) /**1*/ @allow("update", auth().role == admin || auth().role == superadmin) /**2*/ @deny("update", auth().role != superadmin && (role == admin || role == superadmin))

  // Timestamps cannot change
  createdAt     DateTime   @default(now()) @deny('update', true)
  updatedAt     DateTime   @updatedAt @deny('update', true)

  Analyses      Analysis[]
  Models        Model[]
  Presets       Preset[]

  sessions      Session[]
  accounts      Account[]

  /** Unauthenticated users can only access data related with it's email */
  @@allow('read',auth().id == "null" && auth().email == email)

  /** Logged and admin users can update user data */
  @@allow("update,read",auth() == this || auth().role == admin || auth().role == superadmin)
 
  /** Everyone can register if they are not logged in */
  @@allow('create', auth().id == "null")

  /** Admins can delete users */
  @@allow('delete', auth().role == admin || auth().role == superadmin)

  /** Users cannot delete him selfs */
  @@deny('delete',auth() == this)

  /** Only superadmin users can delete others admins */
  @@deny('delete',auth().role == "admin" && (role == superadmin || role == admin))
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}